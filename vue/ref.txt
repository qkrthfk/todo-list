1. VUEX 
- 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
- React의 Flux 패턴에서 기인함

2. Flux 패턴
MVC 패턴(Controller -> Model <-> View)의
복잡한 데이터 흐름의 문제를 해결하는 개발 패턴(Unidirectional Data Flow)
Action -> Dispatcher -> Model -> View
(한 방향으로 흐름)

3. Vuex
  - State : 컴포넌트 간에 공유하는 데이터 data()
  - View : 데이터를 표시하는 화면 template
  - Action : 사용자의 입력에 따라 데이터를 변경하는 methods

4. Store
  - State
  - Getters
  - Mutations
  - Actions

5. Helper
  - 각 속성들을 더 쉽게 사용하는 방법
  - mapState
  - mapGetters
  - mapMutations
  - mapActions

  ex. App.Vue
    import { mapState } from 'vuex;

    export default {
      computed() {
        ...mapState(['num'])
        // num() { return this.$store.state.num; }
      }
    }

    ※...(Object Spread Operator)
    ex. 
      let a = {
        field: 'web',
        language: 'js'
      }

      let b = {
        nation: 'korea',
        ...a
      }

  6. store 속성 모듈화 방법(1)★
  - store.js
    ex.
      import * as getters from './getters';
      import * as mutations from './mutations';

      export const store = new Vuex.Store({
        state: {
          todoItems: storage.fetch(),
        },
        getters: getters, // getters로 축약 가능
        mutations: mutations
      });

  - store\getter.js
    ex. 
      export const A = (state) => {
        return state.todoItems;
      }

  - store\mutations.js
    ex. 
      const B = (state, todoItem) => {
        ...
      }

      const C = (state, todoItem) => {
        ...
      }
      
  
      export { B, C };

  7. store 속성 모듈화 방법(2)★
    store\modules 폴더를 생성해서 todoApp.js 라는 파일 생성
    (store를 성격에 따라 모듈화 하기 위해 사용하는 방법)

    ex. store.js
      import todoApp from './modules/todoApp'

      export const store = new Vuex.Stroe({
        modules: {
          todoApp
        }
      });

    ex. modeuls.js
      const state = {}
      const getter = {}
      const mutations = {}

      export default {
        state,
        getters,
        mutations
      }